Decoratorパターンは一つのカテゴリー(インスタンス)を装飾クラスすべてに継承し、
クラス内に変数として保持することによって、装飾を無数に増やすことのできる設計パターンです。

Decoratorパターンは呼び出し元で複数のクラスを繋げることができるというメリットがありますが、
全てが同じインターフェースを継承し、クラスを継承しているわけではないという設計パターンにより、
Decoratorパターンを実装しているクラスはすべて同じ関数しか使用できないという制限があります。
要するに、同類(似たような)装飾品を付け足すことはできても新しい機能を追加することはできないということになります。

・使用方法
装飾インターフェース：
実行時に使用したい装飾クラスの共通関数を定義。
装飾クラス：
装飾インターフェースで定義された関数の中身を実装。
装飾インターフェースで定義されている関数以外のものを実装する場合は
必ず装飾インターフェース関数実装の中身で呼び出されなければならない。
