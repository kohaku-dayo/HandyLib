Visitorパターンは待機側が訪問側に処理を全てお任せする設計パターンです。

-訪問クラス
 待機クラス別に異なる処理を記述。

-待機クラス : 待機インターフェース, 受け入れインターフェース
 待機インターフェースで設定された関数の処理を記述。
 受け入れインターフェースで設定された関数の処理を記述。
 
-受け入れインターフェース
 訪問クラスの受け入れ処理を設定。
 
-待機インターフェース
 待機クラスの処理を設定。
 
 使い方：
 訪問クラスと待機クラスは複数作成することが可能です。
 
 待機クラスには待機インターフェースに設定した関数、
 もしくはその関数の内部に呼び出し処理が行われていない待機インターフェースとは全く関係のない関数を記述することはできません。
 待機クラスには訪問クラスによる異なる挙動を行う関数を記述する必要はありません。
 待機インターフェースに設定された関数の引数に訪問側を渡すことで訪問側に処理を任せましょう。
 
 訪問クラスには待機クラス別の処理を書きましょう。
 基本的には待機クラスを引数とする異なるクラス型を用いてオーバーロードさせて処理を分けます。
 訪問クラス内に記述されるオーバーロード関数では引数で得たそれぞれの待機クラスが実装している処理を
 実行します。
